# -*- coding: utf-8 -*-
"""Pradiction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DRPpKIf5cYtMs_SBbI7lE8VEGNwX_APZ
"""

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout
import numpy as np

train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/drive/MyDrive/Train_db',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

# Normalize
def process(image,label):
    image = tf.cast(image/255. ,tf.float32)
    return image,label

train_ds = train_ds.map(process)
# validation_ds = validation_ds.map(process)

train_ds

# create CNN model

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
# model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))


model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu'))
# model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(train_ds,epochs=5)

import cv2
import matplotlib.pyplot as plt



# test_img = cv2.imread("/content/drive/MyDrive/Train_db/Rajendra/raj1.jpg")
test_img = cv2.imread("/content/drive/MyDrive/WhatsApp Image 2023-09-15 at 23.28.46.jpg")

plt.imshow(test_img)

test_img.shape

test_img = cv2.resize(test_img,(256,256))
test_input = test_img.reshape((1,256,256,3))

def GetPrediction(test_img):
  test_img = cv2.resize(test_img,(256,256))
  test_input = test_img.reshape((1,256,256,3))
  output=model.predict(test_input)[0][0]

  if int(output) > 0.50:
    print("ramgopal")
  else:
    print("rajendra")



model.predict(test_input)

output=model.predict(test_input)[0][0]
int(output)
if int(output) > 0.50:
  print("ramgopal")
else:
  print("rajendra")

import pickle

int(output)

pickle.dump( model, open( "trial_search.pickle", "wb" ) )

